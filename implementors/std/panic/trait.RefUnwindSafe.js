(function() {var implementors = {};
implementors["bamboo_rs_core"] = [{"text":"impl&lt;H, S&gt; RefUnwindSafe for Entry&lt;H, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for Signature&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for TryIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Select&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SelectedOperation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadyTimeoutError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelectTimeoutError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryReadyError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TrySelectError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecvTimeoutError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Receiver&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Injector&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Stealer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Worker&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Steal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;T:&nbsp;?Sized&gt; RefUnwindSafe for Atomic&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g, T:&nbsp;?Sized, P&gt; RefUnwindSafe for CompareAndSetError&lt;'g, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; RefUnwindSafe for Owned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g, T:&nbsp;?Sized&gt; RefUnwindSafe for Shared&lt;'g, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Collector","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LocalHandle","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Guard","synthetic":true,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for CachePadded&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Backoff","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Parker","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Unparker","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; RefUnwindSafe for ShardedLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; RefUnwindSafe for ShardedLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WaitGroup","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; !RefUnwindSafe for Scope&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, 'env&gt; !RefUnwindSafe for ScopedThreadBuilder&lt;'scope, 'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, T&gt; RefUnwindSafe for ScopedJoinHandle&lt;'scope, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AtomicCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; RefUnwindSafe for ShardedLock&lt;T&gt;","synthetic":false,"types":[]}];
implementors["curve25519_dalek"] = [{"text":"impl RefUnwindSafe for Scalar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MontgomeryPoint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompressedEdwardsY","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EdwardsPoint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VartimeEdwardsPrecomputation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EdwardsBasepointTable","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompressedRistretto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RistrettoPoint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VartimeRistrettoPrecomputation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RistrettoBasepointTable","synthetic":true,"types":[]}];
implementors["digest"] = [{"text":"impl RefUnwindSafe for InvalidOutputSize","synthetic":true,"types":[]}];
implementors["ed25519"] = [{"text":"impl RefUnwindSafe for Signature","synthetic":true,"types":[]}];
implementors["ed25519_dalek"] = [{"text":"impl RefUnwindSafe for Keypair","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PublicKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SecretKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExpandedSecretKey","synthetic":true,"types":[]}];
implementors["getrandom"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["hex"] = [{"text":"impl RefUnwindSafe for FromHexError","synthetic":true,"types":[]}];
implementors["merlin"] = [{"text":"impl RefUnwindSafe for Transcript","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TranscriptRng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TranscriptRngBuilder","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl RefUnwindSafe for TokenStream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LexError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Punct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ident","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TokenTree","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Delimiter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Spacing","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntoIter","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl RefUnwindSafe for Bernoulli","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Open01","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpenClosed01","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Binomial","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Cauchy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dirichlet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Exp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Exp1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Beta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChiSquared","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FisherF","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gamma","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StudentT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogNormal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Normal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StandardNormal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pareto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Poisson","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Triangular","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnitCircle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnitSphereSurface","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Weibull","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; RefUnwindSafe for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Standard","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BernoulliError","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UniformDuration","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WeightedError","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EntropyRng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StdRng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ThreadRng","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; RefUnwindSafe for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StepRng","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; RefUnwindSafe for SliceChooseIter&lt;'a, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexVecIntoIter","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl RefUnwindSafe for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OsRng","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; RefUnwindSafe for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; RefUnwindSafe for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rayon"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Chain&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Chunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Cloned&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Copied&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Enumerate&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; RefUnwindSafe for Filter&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; RefUnwindSafe for FilterMap&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for FlatMap&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for FlatMapIter&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Flatten&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for FlattenIter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, ID, F&gt; RefUnwindSafe for Fold&lt;I, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; RefUnwindSafe for FoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for Inspect&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; RefUnwindSafe for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; RefUnwindSafe for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as ParallelIterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for MaxLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for MinLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for Map&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, INIT, F&gt; RefUnwindSafe for MapInit&lt;I, INIT, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;INIT: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T, F&gt; RefUnwindSafe for MapWith&lt;I, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for MultiZip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for PanicFuse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; RefUnwindSafe for IterBridge&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; RefUnwindSafe for Positions&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for RepeatN&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Rev&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Skip&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, S&gt; RefUnwindSafe for Split&lt;D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Take&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, ID, F&gt; RefUnwindSafe for TryFold&lt;I, U, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; RefUnwindSafe for TryFoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Try&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Zip&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for ZipEq&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for StepBy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for Iter&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for Chunks&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for ChunksExact&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for Windows&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for IterMut&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for ChunksMut&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for ChunksExactMut&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; RefUnwindSafe for Split&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; RefUnwindSafe for SplitMut&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; RefUnwindSafe for Chars&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; RefUnwindSafe for CharIndices&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; RefUnwindSafe for Bytes&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; RefUnwindSafe for EncodeUtf16&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; RefUnwindSafe for Split&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; RefUnwindSafe for SplitTerminator&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; RefUnwindSafe for Lines&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; RefUnwindSafe for SplitWhitespace&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; RefUnwindSafe for Matches&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; RefUnwindSafe for MatchIndices&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Drain&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for Drain&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rayon_core"] = [{"text":"impl !RefUnwindSafe for ThreadBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; !RefUnwindSafe for Scope&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; !RefUnwindSafe for ScopeFifo&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ThreadPool","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ThreadPoolBuildError","synthetic":true,"types":[]},{"text":"impl&lt;S&nbsp;=&nbsp;DefaultSpawn&gt; !RefUnwindSafe for ThreadPoolBuilder&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Configuration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FnContext","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl RefUnwindSafe for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; RefUnwindSafe for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; RefUnwindSafe for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; RefUnwindSafe for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; RefUnwindSafe for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; RefUnwindSafe for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; RefUnwindSafe for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; RefUnwindSafe for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde_bytes"] = [{"text":"impl RefUnwindSafe for Bytes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ByteBuf","synthetic":true,"types":[]}];
implementors["sha2"] = [{"text":"impl RefUnwindSafe for Sha224","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha256","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha384","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha512","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha512Trunc224","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha512Trunc256","synthetic":true,"types":[]}];
implementors["signature"] = [{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["snafu"] = [{"text":"impl RefUnwindSafe for Backtrace","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoneError","synthetic":true,"types":[]}];
implementors["subtle"] = [{"text":"impl RefUnwindSafe for Choice","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for CtOption&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl RefUnwindSafe for Attribute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetaList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetaNameValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldsNamed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Variant","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VisCrate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VisPublic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VisRestricted","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Arm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Label","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MethodTurbofish","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAssign","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAsync","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAwait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBinary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBlock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBox","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBreak","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprCall","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprCast","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprClosure","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprContinue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprField","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprForLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprGroup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprIf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprLet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprLit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprMatch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprParen","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprPath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprReference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprRepeat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprReturn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprTry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprTuple","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprUnary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprWhile","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprYield","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Index","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConstParam","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Generics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LifetimeDef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PredicateEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PredicateType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitBound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeParam","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WhereClause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItemFn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItemMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItemStatic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItemType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItemConst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItemMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItemMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItemType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemConst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemEnum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemExternCrate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemFn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemForeignMod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemImpl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemMacro2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemMod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemStatic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemTrait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemTraitAlias","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemUnion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemUse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Receiver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItemConst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItemMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItemMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItemType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseGlob","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseGroup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UsePath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseRename","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for File","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lifetime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitBool","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitByte","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitByteStr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitChar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitFloat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitInt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitStr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataEnum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataUnion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeriveInput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Abi","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BareFnArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeBareFn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeGroup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeInfer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeNever","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeParen","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypePath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypePtr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeReference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeSlice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeTuple","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Variadic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldPat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatBox","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatIdent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatLit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatOr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatPath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatReference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatRest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatSlice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatTuple","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatWild","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Binding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Constraint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Path","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PathSegment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QSelf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AttrStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Meta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NestedMeta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fields","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Visibility","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenericMethodArgument","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RangeLimits","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Expr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Member","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenericParam","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeParamBound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WherePredicate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FnArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Item","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseTree","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StrStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Data","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BinOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Stmt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReturnType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenericArgument","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PathArguments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Underscore","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Abstract","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for As","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Async","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Auto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Await","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Become","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Box","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Break","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Const","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Continue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Crate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Default","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Do","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dyn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Else","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Enum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Extern","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Final","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for For","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for If","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Impl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for In","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Let","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Loop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Move","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mut","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Override","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Priv","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pub","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ref","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Return","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelfType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelfValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Static","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Struct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Super","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Trait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Try","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Typeof","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Union","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Unsafe","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Unsized","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Use","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Virtual","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Where","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for While","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Yield","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Add","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AddEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for And","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AndAnd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AndEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for At","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bang","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Caret","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaretEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Colon","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Colon2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Comma","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Div","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DivEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dollar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dot2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dot3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DotDotEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Eq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EqEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ge","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Le","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MulEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ne","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Or","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OrEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OrOr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Question","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RArrow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LArrow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RemEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FatArrow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Semi","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShlEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShrEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Star","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sub","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tilde","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Brace","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bracket","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Paren","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; RefUnwindSafe for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; RefUnwindSafe for PairsMut&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; RefUnwindSafe for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Nothing","synthetic":true,"types":[]}];
implementors["synstructure"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for BindingInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for VariantAst&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for VariantInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Structure&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AddBounds","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BindStyle","synthetic":true,"types":[]}];
implementors["varu64"] = [{"text":"impl RefUnwindSafe for DecodeError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Decoder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Encoder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LengthValueDecoder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LengthValueLimitDecoder","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for LengthValueEncoder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecodeError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecodeLimitError","synthetic":true,"types":[]}];
implementors["yamf_hash"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for YamfHash&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()