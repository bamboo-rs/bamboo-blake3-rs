# Based on the "trust" template v0.1.2
# https://github.com/japaric/trust/tree/v0.1.2

dist: trusty
language: rust
services: docker
sudo: required

# TODO Rust builds on stable by default, this can be
# overridden on a case by case basis down below.

env:
  global:
    - CRATE_NAME=bamboo-rs
    - secure: JyfETmJqBn0iddZ4if9qgl1wcRHdJZQsIE6MENebzC8pAsTRFpj79StluA36t7C/AFTDpF07hMimgc8Gx29eII1wiBbCD/hbidckuYjkdh+yqWSubsEo3AnF+Gkq1lh3Tu3mFfEntL8yheuTTLRI1v0Sc7ZuopwttKQ8gZy7eoYyDqavoQsxsX8LkS3dT0Z+1yuCJWc7NNlj28Y1qcegYMWzukPPkQSZMwZcbcqdf1YGmv93Pi1gtyQOBVNGRGGBtGJAr4S+HESFQ+IYaXaB9G0xYJssdjR48gOFbC/TYZMvWX8X00Yuhiu0X9Bfh9AYxlC/piZnRrtjeh/VR90L8RhbllVsPG8HFn+V5uMub+SxEn2PVsNSL0pCwpoDaVEi+R/WRpkElu1pZTPVdziEV82TFO6f38fL/kZjcLkt+dp/Nc1DeRzxhoZOG8d7DsQiX4Go1V8ILRirEVFshX1yfi5cBCmMNjxdqYvFJ+DG2RTh5/UVxx0q5zIAnH6bqWufqznZecPBvcX1D2QFevHBH4dpIzjsHNgKiLFTxVbj+/7kiC5wYP0Z3Dw/maDQ7mL1xDJttIKd+vZG6yJveVVHEK5zRJhNBiCumlJdYEaiM/caZ3uPip4FtGRDSectu5zNwZVGC3U84LCBMI14GnL1kMJJ3vp0mefALh6UBBfjiNs=

matrix:
  # TODO These are all the build jobs. Adjust as necessary. Comment out what you
  # don't need
  include:
    # Android
    #    - env: TARGET=aarch64-linux-android DISABLE_TESTS=1
    #      rust: nightly
    #    - env: TARGET=arm-linux-androideabi DISABLE_TESTS=1
    #      rust: nightly
    #    - env: TARGET=armv7-linux-androideabi DISABLE_TESTS=1
    #      rust: nightly
    #    - env: TARGET=i686-linux-android DISABLE_TESTS=1
    #      rust: nightly
    #    - env: TARGET=x86_64-linux-android DISABLE_TESTS=1
    #      rust: nightly
    #
    #    # iOS
    #    - env: TARGET=aarch64-apple-ios DISABLE_TESTS=1
    #      rust: nightly
    #      os: osx
    #    - env: TARGET=armv7-apple-ios DISABLE_TESTS=1
    #      rust: nightly
    #      os: osx
    #    - env: TARGET=armv7s-apple-ios DISABLE_TESTS=1
    #      rust: nightly
    #      os: osx
    #    - env: TARGET=i386-apple-ios DISABLE_TESTS=1
    #      rust: nightly
    #      os: osx
    #    - env: TARGET=x86_64-apple-ios DISABLE_TESTS=1
    #      rust: nightly
    #      os: osx

    # Linux
    #    - env: TARGET=aarch64-unknown-linux-gnu
    #      rust: nightly
    #    - env: TARGET=arm-unknown-linux-gnueabi
    #      rust: nightly
    #    - env: TARGET=armv7-unknown-linux-gnueabihf
    #      rust: nightly
    #    - env: TARGET=i686-unknown-linux-gnu
    #      rust: nightly
    #    - env: TARGET=i686-unknown-linux-musl
    #      rust: nightly
    #    - env: TARGET=mips-unknown-linux-gnu
    #      rust: nightly
    #    - env: TARGET=mips64-unknown-linux-gnuabi64
    #      rust: nightly
    #    - env: TARGET=mips64el-unknown-linux-gnuabi64
    #      rust: nightly
    #    - env: TARGET=mipsel-unknown-linux-gnu
    #      rust: nightly
    #    - env: TARGET=powerpc-unknown-linux-gnu
    #      rust: nightly
    #    - env: TARGET=powerpc64-unknown-linux-gnu
    #      rust: nightly
    #    - env: TARGET=powerpc64le-unknown-linux-gnu
    #      rust: nightly
    #    - env: TARGET=s390x-unknown-linux-gnu DISABLE_TESTS=1
    #      rust: nightly
    - env: TARGET=x86_64-unknown-linux-gnu
      rust: nightly
      #    - env: TARGET=x86_64-unknown-linux-musl
      #      rust: nightly

    # OSX
    #    - env: TARGET=i686-apple-darwin
    #      rust: nightly
    #      os: osx
    #    - env: TARGET=x86_64-apple-darwin
    #      rust: nightly
    #      os: osx
    #
    #    # *BSD
    #    - env: TARGET=i686-unknown-freebsd DISABLE_TESTS=1
    #      rust: nightly
    #    - env: TARGET=x86_64-unknown-freebsd DISABLE_TESTS=1
    #      rust: nightly
    #    - env: TARGET=x86_64-unknown-netbsd DISABLE_TESTS=1
    #      rust: nightly
    #
    #    # Windows
    #    - env: TARGET=x86_64-pc-windows-gnu
    #      rust: nightly
    #
    # Bare metal
    # These targets don't support std and as such are likely not suitable for
    # most crates.
    - env: TARGET=thumbv6m-none-eabi IS_NO_STD=1
      rust: nightly
    - env: TARGET=thumbv7em-none-eabi IS_NO_STD=1
      rust: nightly
    - env: TARGET=thumbv7em-none-eabihf IS_NO_STD=1
      rust: nightly
    - env: TARGET=thumbv7m-none-eabi IS_NO_STD=1
      rust: nightly
    #
    #    # Testing other channels
    #    - env: TARGET=x86_64-unknown-linux-gnu
    #      rust: nightly
    #    - env: TARGET=x86_64-apple-darwin
    #      os: osx
    #      rust: nightly

before_install:
  - set -e
  - rustup self update

install:
  - sh ci/install.sh
  - source ~/.cargo/env || true

script:
  - bash ci/script.sh

after_script: set +e

before_deploy:
  - sh ci/before_deploy.sh

deploy:
  # - Create a `public_repo` GitHub token. Go to: https://github.com/settings/tokens/new
  # - Encrypt it: `travis encrypt 0123456789012345678901234567890123456789
  # - Paste the output down here
  file_glob: true
  file: $CRATE_NAME-$TRAVIS_TAG-$TARGET.*
  on:
    # TODO Here you can pick which targets will generate binary releases
    # In this example, there are some targets that are tested using the stable
    # and nightly channels. This condition makes sure there is only one release
    # for such targets and that's generated using the stable channel
    condition: $TRAVIS_RUST_VERSION = nightly
    tags: true
  provider: releases
  skip_cleanup: true

cache: cargo
before_cache:
  # Travis can't cache files that are not readable by "others"
  - chmod -R a+r $HOME/.cargo

branches:
  only:
    # release tags
    - /^v\d+\.\d+\.\d+.*$/
    - master

notifications:
  email:
    on_success: never
